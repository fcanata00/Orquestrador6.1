[meta]
name=gcc
version=14.2.0
description=GNU Compiler Collection - full example showing all supported fields and options.
group=core
mode=toolchain

[source]
# multiple URLs (primary and mirrors)
url[]=https://ftp.gnu.org/gnu/gcc/gcc-14.2.0/gcc-14.2.0.tar.xz
url[]=https://mirror.example.org/gcc/gcc-14.2.0.tar.xz
# corresponding checksums (can be empty to allow download.sh to warn)
sha256[]=a3f1b2c3d4e5f678901234567890abcdefabcdefabcdefabcdefabcdefabcdef
sha256[]=
# directory name inside tar
dir=gcc-14.2.0
# patches: can be local relative paths or full URLs
patches[]=fix-libstdcxx.patch
patches[]=https://patches.example.org/gcc/fix-issue.patch

[env]
# environment variables to apply during build (metadata_apply_env)
PATH=/tools/bin:/usr/bin
CFLAGS=-O2 -g -pipe
CXXFLAGS=-O2 -g -pipe
LDFLAGS=

[build]
prepare=|
  set -e
  mkdir -v build && cd build
compile=|
  ../configure --prefix=/tools --enable-languages=c,c++
  make -j$(nproc)
check=|
  make -k check || true
install=|
  make install
  install -v -m644 ../LICENSE /usr/share/doc/gcc-14.2.0/LICENSE

[patches]
# directory where local patches live (relative to package dir)
dir=patches

[hooks]
# hooks directory and example hooks
dir=hooks
# example hook files could be hooks/pre_prepare.sh hooks/post_compile.sh

[update]
# Simple API info for update.sh to discover mainstream versions
api=https://ftp.gnu.org/gnu/gcc/
regex=gcc-([0-9.]+)\.tar\.xz
notes=This allows update.sh to scan the ftp directory for new versions.

[meta_notes]
# markdown-friendly additional notes
maintainer=Your Name <you@example.org>
homepage=https://gcc.gnu.org
